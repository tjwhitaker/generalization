#!/usr/bin/perl

#/////////////////////////////////////////////////////////////////////
#//  create_net_types.pl
#//  Copyright (C) 2007  Faustino J. Gomez
#//
#// Go through "Networks.h" and open each listed network
#// hearder file and look for a line with "public Network." 
#// If found, then get the derived class name.  If the class 
#// is not already in the list of net types, add it to the list.
#// Generate the genNet functions that return a network
#// given a type number or name.  This avoids having to keep 
#// up with the numbering of net types, and adding new code
#// everywhere when a new type is introduced.


$net_h_file_names;
$i = 0;

$ESP_PATH = $ARGV[0];
#$HEADER_PATH = $ARGV[1];
#$SRC_PATH = $ARGV[2];

open(NETWORKS_H, "$ESP_PATH/INCLUDE/Networks.h");

$num_types = 0;
while($line = <NETWORKS_H>){
  if($line =~ /^#include/){ #check for #include at beginning of line
     @tmp = split( /\s+/, $line);
     ($quote,$name,$quote) = split(/\"/, $tmp[1]);
     $net_h_file_names[$num_types] = $name;
     ++$num_types;
   }
}
close(NETWORKS_H);

printf "creating genNet.C for network types\n";

$i = 0;
#get the class names
foreach $file (@net_h_file_names){
    open(NET_H_FILE, "$ESP_PATH/INCLUDE/$file") || die "Cannot open $ESP_PATH/INCLUDE/$file $!\n";
    while($line = <NET_H_FILE>){
	if($line =~ /public\s+Network/i){
	    @tmp = split( /\s+/, $line);
	    $class_names[$i] = $tmp[1];
	    printf "   $class_names[$i]\n";
	    $i++;
	}
    }	
    close(NET_H_FILE);
}

open(GEN_NET_FILE, ">$ESP_PATH/INCLUDE/genNet.h") || die "Cannot open $ESP_PATH/INCLUDE/genNet.C $!\n";
####################################################################
# Define enum for CoSyNE network types

printf GEN_NET_FILE "///////////////////////////////////////////////////////////////////\n";
printf GEN_NET_FILE "// genNet.h\n";
printf GEN_NET_FILE "// Copyright (C) 2007  Faustino J. Gomez\n";
printf GEN_NET_FILE "///////////////////////////////////////////////////////////////////\n\n";

printf GEN_NET_FILE "#ifndef _GEN_NET_H_\n";
printf GEN_NET_FILE "#define _GEN_NET_H_\n";

printf GEN_NET_FILE "enum EspNetType { ";
$num_types = @class_names;

for($i = 0; $i < $num_types; ++$i){
  printf GEN_NET_FILE "      TYPE_$class_names[$i]";
    if($i < $num_types -1){
      printf GEN_NET_FILE ",";
    }
  printf GEN_NET_FILE "\n";
}

printf GEN_NET_FILE "};\n";
#prototypes
printf GEN_NET_FILE "class Network;\n";
printf GEN_NET_FILE "Network* genNet(char *type, int in, int hid, int out);\n";
printf GEN_NET_FILE "Network* genNet(EspNetType type, int in, int hid, int out);\n";
printf GEN_NET_FILE "EspNetType netStrNameToEnum(char *type);\n";
printf GEN_NET_FILE "char*  netEnumToStrName(EspNetType type);\n";
printf GEN_NET_FILE "EspNetType  intToNetEnum(int type);\n";
printf GEN_NET_FILE "char* getNetTypeName(Network *net);\n";
printf GEN_NET_FILE "void listNetTypes();\n\n";

printf GEN_NET_FILE "#endif\n";
close(GEN_NET_FILE);

###################################################################
# genNet.C



open(GEN_NET_FILE, ">$ESP_PATH/SRC/genNet.C") || die "Cannot open $ESP_PATH/SRC/genNet.C $!\n";

printf GEN_NET_FILE "///////////////////////////////////////////////////////////////////\n";
printf GEN_NET_FILE "// genNet.C\n";
printf GEN_NET_FILE "// Copyright (C) 2007  Faustino J. Gomez\n";
printf GEN_NET_FILE "//\n";
printf GEN_NET_FILE "// this file is automatically generated by create_net_types.pl\n//\n";
printf GEN_NET_FILE "///////////////////////////////////////////////////////////////////\n";
printf GEN_NET_FILE "#include <iostream>\n";
printf GEN_NET_FILE "#include <typeinfo> \n";
printf GEN_NET_FILE "using std::cout; \nusing std::cerr; \nusing std::endl;\n";
printf GEN_NET_FILE "#include \"Networks.h\" \n";
printf GEN_NET_FILE "#include \"genNet.h\" \n\n";

##################################################################

printf GEN_NET_FILE "char* getNetTypeName(Network *net)\n";
printf GEN_NET_FILE "{\n";
printf GEN_NET_FILE "  const char *tmp_id = typeid( *net ).name();\n";
printf GEN_NET_FILE "  static bool cache = false;\n";
printf GEN_NET_FILE "  static vector<const char*> names(%d);\n\n", $num_types;

printf GEN_NET_FILE "  if(!cache){\n";
printf GEN_NET_FILE "     Network *tmp;\n";

$i = 0;
foreach $net_type (@class_names){
  printf GEN_NET_FILE "     names[$i] = typeid( *(tmp = new $net_type(0,0,0) )).name(); delete tmp;\n";
   ++$i;
}
printf GEN_NET_FILE "     cache = true; \n";
printf GEN_NET_FILE "  } \n\n";
#printf GEN_NET_FILE "  else{ \n   ";

$i = 0;
foreach $net_type (@class_names){
    if($i > 0) { printf GEN_NET_FILE "  else "; }
    else { printf GEN_NET_FILE " ";}
    printf GEN_NET_FILE " if(!strcmp( names[$i], tmp_id ) )\n";
    printf GEN_NET_FILE "      { return \"$net_type\"; }\n";
#    if($i > 0) { printf GEN_NET_FILE "  }\n"; };
    ++$i;
}


#printf GEN_NET_FILE "  }\n";
printf GEN_NET_FILE "}\n\n";

##################################################################
#generate the genNet that takes an enum
printf GEN_NET_FILE "Network* genNet(EspNetType type, int in, int hid, int out)\n";
printf GEN_NET_FILE "{\n";
printf GEN_NET_FILE "   switch ( type ){\n";

$i = 0;;
foreach $net_type (@class_names){
  printf GEN_NET_FILE "     case $i: return new $net_type(in, hid, out); break;\n";
  ++$i;
}
printf GEN_NET_FILE "     default:\n";
printf GEN_NET_FILE "        cerr << \"Error - network not of known type: \"\n";
printf GEN_NET_FILE "       	     << type << endl;\n";
printf GEN_NET_FILE "       exit(1);\n";
printf GEN_NET_FILE "       break;\n";
printf GEN_NET_FILE "   }\n";
printf GEN_NET_FILE "}\n";

printf GEN_NET_FILE "\n\n";

#generate the genNet that takes a string function
printf GEN_NET_FILE "Network* genNet(char *type, int in, int hid, int out)\n";
printf GEN_NET_FILE "{\n";
printf GEN_NET_FILE "   return genNet(netStrNameToEnum(type), in, hid, out); \n";
printf GEN_NET_FILE "}\n";

##################################################################
# 
printf GEN_NET_FILE "EspNetType netStrNameToEnum(char *type){\n";
$i = 0;
foreach $net_type (@class_names){
    if($i > 0) { printf GEN_NET_FILE "  else"; }
    printf GEN_NET_FILE "  if(!strcmp(type, \"$net_type\"))\n";
    printf GEN_NET_FILE "     return TYPE_$net_type;\n";
    ++$i;
}
printf GEN_NET_FILE "}\n\n";


##################################################################
# 
printf GEN_NET_FILE "char*  netEnumToStrName(EspNetType type){\n";
$i = 0;
printf GEN_NET_FILE "  switch (type) { \n";
foreach $net_type (@class_names){
  printf GEN_NET_FILE "     case $i: return \"$net_type\"; break;\n";
  ++$i;
}
printf GEN_NET_FILE "     default:\n";
printf GEN_NET_FILE "        cerr << \"Error - network not of known type: \"\n";
printf GEN_NET_FILE "       	     << type << endl;\n";
printf GEN_NET_FILE "       exit(1);\n";
printf GEN_NET_FILE "       break;\n";
printf GEN_NET_FILE "   }\n";
printf GEN_NET_FILE "}\n";

##################################################################
# 
printf GEN_NET_FILE "EspNetType intToNetEnum(int type){\n";
$i = 0;
printf GEN_NET_FILE "  switch (type) { \n";
foreach $net_type (@class_names){
  printf GEN_NET_FILE "     case $i: return TYPE_$net_type; break;\n";
  ++$i;
}
printf GEN_NET_FILE "     default:\n";
printf GEN_NET_FILE "        cerr << \"Error - network not of known type: \"\n";
printf GEN_NET_FILE "       	     << type << endl;\n";
printf GEN_NET_FILE "       exit(1);\n";
printf GEN_NET_FILE "       break;\n";
printf GEN_NET_FILE "   }\n";
printf GEN_NET_FILE "}\n";


########################################################################
#generate the listNetTypes()
printf GEN_NET_FILE "\n\n";
printf GEN_NET_FILE "void listNetTypes()\n";
printf GEN_NET_FILE "{\n";
printf GEN_NET_FILE "   cout << \"Available network types:\" << endl; \n";
$i = 0;
foreach $net_type (@class_names){
  printf GEN_NET_FILE "   cout << \"  $i : $net_type\" << endl;\n";
  ++$i
}
printf GEN_NET_FILE "}\n";
